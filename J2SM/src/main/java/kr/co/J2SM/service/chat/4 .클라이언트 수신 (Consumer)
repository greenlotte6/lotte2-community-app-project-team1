클라이언트 수신 (Consumer)
---------------------------------------------------------------------------------------------------------

1. STOMP 구독

클라이언트에서 client.subscribe("/topic/room/123", callback) 으로 토픽 구독

---------------------------------------------------------------------------------------------------------

2. 메시지 수신 콜백

브로커로부터 전달된 MESSAGE 프레임을 받아

화면(useState 또는 DOM)에 즉시 렌더링
---------------------------------------------------------------------------------------------------------


왜 Redis + SimpleBroker 조합인가?
SimpleBroker 단독: 단일 인스턴스에서만 실시간 메시지 브로드캐스트 가능

여러 인스턴스(클러스터) 환경에서 WebSocket 세션은 각 인스턴스 메모리에 분산
→ 인스턴스 A 로 접속한 사용자에게만 메시지가 가고, B로 접속한 사용자는 못 받음

Redis Pub/Sub 를 중간에 두면

어떤 인스턴스에서 보내든 중앙 Redis로 퍼블리시

모든 인스턴스의 ChatRedisSubscriber 가 해당 메시지를 받아

각 인스턴스별 SimpleBroker가 자신에게 연결된 세션에 뿌려줌
→ 클러스터 전역 사용자에게 균등하게 실시간 메시지 전달 가능


---------------------------------------------------------------------------------------------------------

[Instance A WS 세션]           [Instance B WS 세션]
         ▲                                ▲
         │                                │
  template.convertAndSend         template.convertAndSend
("/topic/room/123", msg)         ("/topic/room/123", msg)
         │                                │
   SimpleBroker                       SimpleBroker
         │                                │
  (A 전용 브로드캐스트)             (B 전용 브로드캐스트)
         │                                │
     사용자 A                         사용자 B

                ↑
      Redis 채널 "chat:room:123" PUBLISH
                ↑
       모든 인스턴스 Redis Subscriber
                ↑
      MongoDB 저장 및 Pub/Sub 발행
