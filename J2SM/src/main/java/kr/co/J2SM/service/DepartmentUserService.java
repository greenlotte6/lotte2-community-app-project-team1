package kr.co.J2SM.service;

import kr.co.J2SM.dto.user.DeptUsersDTO;
import kr.co.J2SM.dto.user.UserDTO;
import kr.co.J2SM.entity.company.Department;
import kr.co.J2SM.repository.DepartmentRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class DepartmentUserService {
    private final DepartmentRepository departmentRepository;


    // íšŒì‚¬ëª…ìœ¼ë¡œ ë¶€ì„œ-ìœ ì € ê·¸ë£¹í•‘ DTO ë°˜í™˜
    @Transactional(readOnly = true)
    public List<DeptUsersDTO> getUserGroupsByCompany(String companyName) {
        System.out.println("==== [ì„œë¹„ìŠ¤] getUserGroupsByCompany, companyName: " + companyName); // ë¡œê·¸
        // companyNameìœ¼ë¡œ ë¶€ì„œ ë¦¬ìŠ¤íŠ¸ ì¡°íšŒ (usersê¹Œì§€ fetch)
        List<Department> departments = departmentRepository.findAllWithUsersByCompanyName(companyName);

        return departments.stream()
                .map(department -> DeptUsersDTO.builder()
                        .departmentName(department.getDepartmentName())
                        .users(department.getUsers().stream().map(user ->
                                UserDTO.builder()
                                        .uid(user.getUid())
                                        .name(user.getName())
                                        .Position(user.getPosition())
                                        .email(user.getEmail())
                                        .profileImage(user.getProfileImage())
                                        .company(department.getCompany().getCompanyName()) // ðŸ”¥ íšŒì‚¬ëª…
                                        .departmentName(department.getDepartmentName())    // ðŸ”¥ ë¶€ì„œëª…
                                        // ...í•„ìš”í•œ í•„ë“œë§Œ
                                        .build()
                        ).collect(Collectors.toList()))
                        .build())
                .collect(Collectors.toList());
    }
}