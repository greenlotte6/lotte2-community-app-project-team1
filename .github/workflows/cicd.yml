name: Java CI with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Grant execute permission for gradlew
        run: chmod +x J2SM/gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build
          build-root-directory: J2SM

      - name: Get JAR_FILE
        id: jarfile
        run: |
          JAR_FILE=$(ls J2SM/build/libs/*.jar | grep -v plain | head -n 1)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ env.JAR_FILE }} # JAR 파일 경로가 정확한지 확인

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: J2SM/build/libs/ # 정확한 경로로 다운로드

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy JAR to EC2
        run: |
          JAR_FILE=$(ls J2SM/build/libs/*.jar | head -n 1)
          scp -i private_key.pem \
            -o StrictHostKeyChecking=no \
            $JAR_FILE \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/

      - name: Check current directory
        run: |
          pwd

      # 이미지를 EC2로 전송 (uploads 디렉토리 복사)
      - name: Copy images (uploads) to EC2
        run: |
          scp -i private_key.pem \
            -o StrictHostKeyChecking=no \
            -r J2SM/uploads/* \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/uploads/

      - name: Restart Spring Application on EC2
        run: |
          JAR_FILE=$(basename $(ls J2SM/build/libs/*.jar | head -n 1))
          ssh -i private_key.pem \
            -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            pgrep java | xargs kill -9;
            nohup java -jar /home/${{ secrets.AWS_EC2_USER }}/$JAR_FILE > app.log 2>&1 &
          EOF

      - name: Cleanup
        run: rm -f private_key.pem
